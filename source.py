import config
import telebot
import stayAlive
import getCourse
import subprocess
import qiwi
import crypto
from telebot import types
import sys
bot = telebot.TeleBot(config.TOKEN_TG)

f = open('numbers.txt', 'r')
nums = f.read().split()
f.close()

tickets = ["USDT", "BTC", 'ETH', 'LTC']
currencies = ['RUB']

admin_id = [6251449399]
cur_cur = ''
cur_rate = ''
ind = 1
qiwi_dict = {}
cryp_dict = {}
process = stayAlive.start()


class User_qiwi:
    def __init__(self, amount):
        self.amount = amount
        self.were = None
        self.addr = None
        self.time = None
        self.ticker = None
        self.rate = None


class User_crypto:
    def __init__(self, amount):
        self.num = None
        self.amount = amount
        self.time = None
        self.ticker = None
        self.rate = None


def valid_phone_2(phone):
    return phone in nums


def valid_phone(phone):
    return phone.isdigit() and len(phone) == 11 and phone[0] == '7'


def valid_amount(amount):
    try:
        float(amount)
        return True
    except ValueError:
        return False


def valid_3(chat_id, msg_id, s):
    t = s.find('‚Ññ')
    index = int(s[t+1:t+7])
    user = qiwi_dict[index]
    global process
    stayAlive.stop(process)
    ans = qiwi.getLastHis(user.where)
    process = stayAlive.start()
    time = ans[0].replace(' ', '').split('–≤')
    time[1] = time[1].split(':')
    time = [time[0], int(time[1][0])*60*60+int(time[1][1])*60]

    '##############################################################'
    if ans[3][:-1] == str(round(user.amount*user.rate*0.97, 2)) and ans[0] == user.time and 0 < (time[1]-int(user.time[1])) <= 1800:
        '#########################################################'

        s = s.replace('üîµ–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...', 'üü¢–û–ø–ª–∞—á–µ–Ω–æ')
        bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text=s)
        s = f'<code>{user.addr}</code>\n<code>{user.amount}</code> '+user.ticker
        bot.send_message(chat_id, '‚úÖ–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã', parse_mode='html')
        for i in admin_id:
            bot.send_message(i, '–ü–æ—Å—Ç—É–ø–∏–ª –ø–ª–∞—Ç–µ–∂\n\n' + s, parse_mode='html')
    else:
        bot.send_message(chat_id, '‚ùå–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', parse_mode='html')


def valid_1(chat_id, msg_id, s):
    t = s.find('‚Ññ')
    index = int(s[t+1:t+7])
    user = cryp_dict[index]
    ans = crypto.get_info(config.ADDR, user.ticker)
    t = int(ans[5]) - int(user.time[1])

    '#############################################################'
    if user.amount == ans[3] and user.ticker == ans[4] and user.time[0] == ans[0] and 0 < t <= 1800:
        '#############################################################'

        s = s.replace('üîµ–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...', 'üü¢–û–ø–ª–∞—á–µ–Ω–æ')
        bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text=s)
        s = f'<code>{user.num}</code>\n<code>{round(float(user.amount)*user.rate,2)}</code> ‚ÇΩ'
        bot.send_message(chat_id, '‚úÖ–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã', parse_mode='html')
        for i in admin_id:
            bot.send_message(i, '–ü–æ—Å—Ç—É–ø–∏–ª –ø–ª–∞—Ç–µ–∂\n\n' + s, parse_mode='html')
    else:
        bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text=s)
        bot.send_message(chat_id, '‚ùå–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', parse_mode='html')


@bot.callback_query_handler(func=lambda c: c.data)
def callback(callback_quary: types.CallbackQuery):
    code = callback_quary.data
    msg_id = callback_quary.json['message']['message_id']
    id = callback_quary.json['from']['id']
    s = callback_quary.json['message']['text']
    if code in ('1', '3'):
        s = s.replace('üü°–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', 'üîµ–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...')
        bot.edit_message_text(chat_id=id, message_id=msg_id, text=s)
        if code == '1':
            valid_1(id, msg_id, s)
        else:
            valid_3(id, msg_id, s)
    elif code in ('2', '4'):
        s = s.replace('üü°–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', 'üî¥–û—Ç–º–µ–Ω–µ–Ω–∞')
        bot.edit_message_text(chat_id=id, message_id=msg_id, text=s)


def getHisNum(message):
    global ind
    chat_id = message.chat.id
    num = message.text
    num = num.replace(' ', '')
    if len(num) == 16:
        user = cryp_dict[ind]
        user.time = crypto.get_time(message.date)
        user.num = num
        s = f'‚úÖ<b>–ó–∞—è–≤–∫–∞ ‚Ññ{ind:06} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n'
        s += 'üíµ<b>–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: </b>'+str(round(cur_rate*float(user.amount), 2))+' ‚ÇΩ'
        s += '\nüè¶<b>–°—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: </b>'+user.num
        s += '\n\n‚è∫<b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏</b>: üü°–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n'
        s += 'üïê<b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 30 –º–∏–Ω—É—Ç\n'
        s += 'üíµ<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>'+user.amount+'</code> '+cur_cur+'\n'
        s += 'üè¶<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: </b><code>'+config.ADDR+'</code> (–≤ —Å–µ—Ç–∏ BEP-20)'
        in_btn_1 = types.InlineKeyboardButton('üíµ–û–ø–ª–∞—á–µ–Ω–æ', callback_data='1')
        in_btn_2 = types.InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='2')
        in_kb = types.InlineKeyboardMarkup(row_width=2)
        in_kb.add(in_btn_1, in_btn_2)
        bot.send_message(chat_id, s, parse_mode='html', reply_markup=in_kb)
        ind += 1
        cancel(message)
    else:
        if num == '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å':
            cancel(message)
        else:
            bot.send_message(chat_id, '‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='html')
            bot.register_next_step_handler(message, getHisNum)


def getHisNum2(message):
    global ind
    chat_id = message.chat.id
    addr = message.text
    if addr != '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å':
        user = qiwi_dict[ind]
        user.time = crypto.get_time(message.date)
        user.ticker = cur_cur
        user.rate = cur_rate
        user.addr = addr
        s = f'‚úÖ<b>–ó–∞—è–≤–∫–∞ ‚Ññ{ind:06} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n'
        s += 'üíµ<b>–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: </b>'+user.amount+' '+cur_cur
        s += '\nüè¶<b>–°—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: </b>'+user.addr
        s += '\n\n‚è∫<b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏</b>: üü°–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n'
        s += 'üïê<b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 30 –º–∏–Ω—É—Ç\n'
        s += 'üíµ<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>'+str(round(cur_rate*float(user.amount)*0.97, 2))+'</code> ‚ÇΩ\n'
        s += 'üè¶<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: </b><code>'+nums[ind % (len(nums))-1]+'</code>'
        user.where = nums[ind % (len(nums))-1]
        in_btn_1 = types.InlineKeyboardButton('üíµ–û–ø–ª–∞—á–µ–Ω–æ', callback_data=f'3')
        in_btn_2 = types.InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'4')
        in_kb = types.InlineKeyboardMarkup(row_width=2)
        in_kb.add(in_btn_1, in_btn_2)
        bot.send_message(chat_id, s, parse_mode='html', reply_markup=in_kb)
        ind += 1
        cancel(message)
    else:
        cancel(message)


mmin = ''
mmax = ''


def process_a_step(message):
    chat_id = message.chat.id
    amount = message.text.replace(',', '.')
    if valid_amount(amount) and (float(mmin) <= float(amount) <= float(mmax)):
        user = User_qiwi(amount)
        qiwi_dict[ind] = user
        msg = bot.send_message(chat_id, f'‚úâ<b>–£–∫–∞–∂–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å {cur_cur} –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è</b>', parse_mode='html')
        bot.register_next_step_handler(msg, getHisNum2)
    else:
        if amount == '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å':
            cancel(message)
        else:
            bot.send_message(chat_id, '‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='html')
            bot.register_next_step_handler(message, process_a_step)


def process_amount_step(message):
    chat_id = message.chat.id
    amount = message.text
    amount = amount.replace(',', '.')
    if valid_amount(amount):
        user = User_crypto(amount)
        cryp_dict[ind] = user
        user.ticker = cur_cur
        user.rate = cur_rate
        msg = bot.send_message(chat_id, '‚úâ<b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è</b>', parse_mode='html')
        bot.register_next_step_handler(msg, getHisNum)
    else:
        if amount == '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å':
            cancel(message)
        else:
            bot.send_message(chat_id, '‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='html')
            bot.register_next_step_handler(message, process_amount_step)


def get_phone_b(message):
    global process
    chat_id = message.chat.id
    phone = message.text
    if valid_phone(phone) and valid_phone_2(phone):
        user = User_qiwi(phone)
        qiwi_dict[chat_id] = user
        stayAlive.stop(process)
        ans = qiwi.getBal(qiwi_dict[message.chat.id].phone)
        if ans:
            process = stayAlive.start()
            bot.send_message(message.chat.id, ans, parse_mode='html')
    else:
        if phone == '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å':
            cancel(message)
        else:
            bot.send_message(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='html')
            bot.register_next_step_handler(message, get_phone_b)


@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id not in admin_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üí±–û–±–º–µ–Ω")
        btn2 = types.KeyboardButton("üí∞–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞")
        btn3 = types.KeyboardButton("‚úâ–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
        markup.add(btn1, btn2, btn3)
    s = '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç <b>Co1nChange!</b>\n\n–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∏ –≤—ã–≥–æ–¥–Ω–æ –æ–±–º–µ–Ω—è—Ç—å BTC, USDT, LTC –∏ ETH –Ω–∞ –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏ –∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.\n\n&#128100<b>–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å!</b>\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ —É –Ω–∞—Å –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤–µ—Ä–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É. –û–±–º–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ P2P, —Ç–∞–∫ —á—Ç–æ –¥–ª—è –±–∞–Ω–∫–∞ —ç—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ.\n\n&#127950<b>–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!</b>\n–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –æ–±–º–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ 15-20 –º–∏–Ω—É—Ç.\n\nüí∞<b>–í—ã–≥–æ–¥–Ω—ã–µ –∫—É—Ä—Å—ã!</b>\n–ú—ã –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ª—É—á—à—ã–µ –∫—É—Ä—Å—ã.'
    bot.send_message(message.chat.id, s, reply_markup=markup, parse_mode='html')


def cancel(message):
    if message.from_user.id not in admin_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üí±–û–±–º–µ–Ω")
        btn2 = types.KeyboardButton("üí∞–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞")
        btn3 = types.KeyboardButton("‚úâ–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
        markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, '‚Ñπ–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup, parse_mode='html')


@bot.message_handler(commands=['exchange'])
def exchange(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('USDT')
    btn2 = types.KeyboardButton('BTC')
    btn3 = types.KeyboardButton('ETH')
    btn4 = types.KeyboardButton('LTC')
    btn5 = types.KeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.chat.id, '‚úâ–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å:', reply_markup=markup, parse_mode='html')


@bot.message_handler(commands=['support'])
def support(message):
    s = '‚úâ–ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –ª–∏–±–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å - –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.\n\n@Co1nChange_help (—Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º)'
    bot.send_message(message.chat.id, s, parse_mode='html')


@bot.message_handler(commands=['rates'])
def rates(message):
    ans = getRate()
    bot.send_message(message.chat.id, ans, parse_mode='html')


def getRate():
    ans = 'üí∞<b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞</b>\n\n'
    for ticket in tickets:
        for currency in currencies:
            ans += f'üîò<b>–í–∞–ª—é—Ç–∞:</b> {ticket}:\n'
            price = getCourse.get_price(ticket, currency)
            ans += f'\t‚¨á<b>–ü–æ–∫—É–ø–∫–∞</b>: 1 {ticket} ‚Üí {price}‚ÇΩ\n'
            ans += f'\t‚¨Ü<b>–ü—Ä–æ–¥–∞–∂–∞</b>: {round(price*0.97,2)}‚ÇΩ ‚Üí 1 {ticket}\n\n'
    return ans


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    global process
    chat_id = message.chat.id
    if message.text == 'üí±–û–±–º–µ–Ω':
        exchange(message)
    elif message.text == '–ë–∞–ª–∞–Ω—Å':
        msg = bot.reply_to(message, '–ë–∞–ª–∞–Ω—Å –∫–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ qiwi –≤—ã–≤–µ—Å—Ç–∏?')
        bot.register_next_step_handler(message, get_phone_b)
    elif message.text == 'üí∞–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞':
        rates(message)
    elif message.text == '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å':
        cancel(message)
    elif message.text == '‚úâ–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        support(message)
    elif message.text in tickets:
        global cur_rate
        s = 'üíµ–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: '+message.text+'\n\n'
        rate = getCourse.get_price(message.text, 'RUB')
        cur_rate = rate
        s += f'\t‚¨á<b>–ü–æ–∫—É–ø–∫–∞</b>: 1 {message.text} ‚Üí {rate}‚ÇΩ\n'
        s += f'\t‚¨Ü<b>–ü—Ä–æ–¥–∞–∂–∞</b>: {round(rate*0.97,2)}‚ÇΩ ‚Üí 1 {message.text}\n\n'
        s += '‚úâ–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton(message.text+' ‚Üí RUB')
        btn2 = types.KeyboardButton('RUB ‚Üí '+message.text)
        btn3 = types.KeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, s, reply_markup=markup, parse_mode='html')
    elif ' ‚Üí ' in message.text:
        global cur_cur
        tmp = message.text.replace(' ‚Üí ', ' ')
        _from, to = tmp.split()
        cur_cur = to
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn3 = types.KeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å')
        markup.add(btn3)
        global mmin, mmax
        if 'BTC' in (_from, to):
            mmin, mmax = '0.001', '0.5'
        elif 'USDT' in (_from, to):

            '#############################################'
            mmin, mmax = '50', '4000'
            '##################################################'

        elif 'ETH' in (_from, to):

            '#################################################'
            mmin, mmax = '0.02', '1'
            '#####################################################'

        else:
            mmin, mmax = '0.5', '10'
        if _from == 'RUB':
            s = f'üíµ<b>–û–±–º–µ–Ω —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π –Ω–∞ </b>'+to+'\n\n‚Ñπ<b>–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:</b> '+str(round(cur_rate*0.97))+f'‚ÇΩ ‚Üí 1 {to}\n'
            s += (f'‚¨á<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> {mmin} '+to+f'\n‚¨Ü<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> {mmax} '+to+'\n\n')
            s += (f'‚úâ<b>–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ {to} –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>')
            msg = bot.send_message(chat_id, s, reply_markup=markup, parse_mode='html')
            bot.register_next_step_handler(msg, process_a_step)
        else:
            cur_cur = _from
            s = f'üíµ<b>–û–±–º–µ–Ω {_from} –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏</b>\n\n‚Ñπ<b>–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:</b> '+f'1 {_from} ‚Üí ' + str(cur_rate)+'‚ÇΩ\n'
            s += (f'‚¨á<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> {mmin} '+_from+f'\n‚¨Ü<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> {mmax} '+_from+'\n\n')
            s += (f'‚úâ<b>–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ {_from} –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:</b> (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —Ç—ã—Å—è—á–Ω—ã—Ö)')
            msg = bot.send_message(chat_id, s, reply_markup=markup, parse_mode='html')
            bot.register_next_step_handler(msg, process_amount_step)


bot.polling(none_stop=True, interval=0)  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å
